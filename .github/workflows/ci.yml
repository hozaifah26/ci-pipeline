name: CI Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t my-app .

  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Remove container with same name if exists
      - name: Remove old container if exists
        run: |
          docker rm -f my-app-container || true

      # Free port 8080 if already in use by another container
      - name: Free port 8080 if already allocated
        run: |
          CONTAINER_ID=$(docker ps -q --filter "publish=8080")
          if [ -n "$CONTAINER_ID" ]; then
            echo "Port 8080 in use by container $CONTAINER_ID. Stopping it..."
            docker rm -f $CONTAINER_ID
          fi

      - name: Run container on port 8080
        run: |
          docker build -t my-app .
          docker run -d -p 8080:80 --name my-app-container my-app

  test:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for container to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:8080 > /dev/null; then
              echo "App is up!"
              exit 0
            fi
            echo "Waiting for app..."
            sleep 3
          done
          exit 1

      - name: Run tests
        run: |
          curl -v http://localhost:8080   # Replace with actual test commands

  cleanup:
    runs-on: self-hosted
    needs: test
    if: always()
    steps:
      - name: Stop and remove container
        run: |
          docker rm -f my-app-container || true
